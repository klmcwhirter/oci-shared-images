#!/bin/bash
#*----------------------------------------------------------------------------*
#* NAME: ocisictl
#*
#* DESCRIPTION:
#* Create OCI images and distroboxen
#* Pass --prune as the first arg to stop containers and perform system prune
#*----------------------------------------------------------------------------*

CONFIG=ocisictl.yaml

if $(which yq >/dev/null 2>&1)
then
    true
else
    echo "$0 depends on yq - not found in path"
    exit 2
fi

# CM_OPTS="BUILDKIT_PROGRESS=plain"
CM_OPTS=""

export DBX_CONTAINER_MANAGER=${DBX_CONTAINER_MANAGER:-docker}

PRUNE=${1:-''}

#*----------------------------------------------------------------------------*
function _logbar
{
    declare -r bar='#* ----------------------------------------------------------------------'

    echo $bar
    echo $*
    echo $bar
}
#*----------------------------------------------------------------------------*
function assemble_distrobox
{
    local name=$1
    local distrobox=$(config_img_distrobox $name)
    [ -z "${distrobox}" -o "${distrobox}" = "null" ] && distrobox="${name}"

    _logbar Assembling ${distrobox} ...

    echo DBX_CONTAINER_ALWAYS_PULL=0 distrobox assemble create --replace --name ${distrobox}
    DBX_CONTAINER_ALWAYS_PULL=0 distrobox assemble create --replace --name ${distrobox}

    _logbar Assembling ${distrobox} ... done.
}
#*----------------------------------------------------------------------------*
function clean_imgs
{
    for img in $(config_imgs_not_assemble | tac)
    do
        local tag=$(config_img_tag $img)
        [ -z "${tag}" -o "${tag}" = "null" ] && tag="latest"
        img="${img}:${tag}"

        _logbar Cleaning ${img} ...

        ${DBX_CONTAINER_MANAGER} rmi -f ${img}

        _logbar Cleaning ${img} ... done.
    done

    ${DBX_CONTAINER_MANAGER} image prune -f
}
#*----------------------------------------------------------------------------*
function config_imgs_assemble
{
    yq 'filter(.assemble == true) | .[].name' ${CONFIG}
}
#*----------------------------------------------------------------------------*
function config_imgs_not_assemble
{
    yq 'filter(.assemble != true and .enabled == true) | .[].name' ${CONFIG}
}
#*----------------------------------------------------------------------------*
function config_imgs_enabled
{
    yq 'filter(.enabled == true) | .[].name' ${CONFIG}
}
#*----------------------------------------------------------------------------*
function config_img_distrobox
{
    name=$1 yq 'filter(.name == strenv(name)) | .[].distrbox' ${CONFIG}
    unset name
}
#*----------------------------------------------------------------------------*
function config_img_path
{
    name=$1 yq 'filter(.name == strenv(name)) | .[].path' ${CONFIG}
    unset name
}
#*----------------------------------------------------------------------------*
function config_img_tag
{
    name=$1 yq 'filter(.name == strenv(name)) | .[].tag' ${CONFIG}
    unset name
}
#*----------------------------------------------------------------------------*
function create_img
{
    local name=$1
    local path=$(config_img_path $name)
    local tag=$(config_img_tag $name)
    [ -z "${tag}" -o "${tag}" = "null" ] && tag="latest"

    pushd ${path}

    if [ ${did_prune} -ne 1 ]
    then
        ${DBX_CONTAINER_MANAGER} stop ${name}
        ${DBX_CONTAINER_MANAGER} rm -f --volumes ${name}
        ${DBX_CONTAINER_MANAGER} rmi -f ${name}
    fi

    _logbar Creating ${name} ...

    local build_args=""
    local cf_suffix=${name}
    if [[ "${name}" =~ "-dx"$ ]]
    then
        build_args="--build-arg USER=$USER"
        build_args+=" --build-arg UID=`id -u $USER`"
        build_args+=" --build-arg GID=`id -g $USER`"
        build_args+=" --build-arg IMG=${name%-dx}"
        build_args+=" --build-arg TAG=${tag}"
        cf_suffix="img-dx"
    fi

    echo ${CM_OPTS} ${DBX_CONTAINER_MANAGER} buildx build -f Containerfile.${cf_suffix} -t ${name}:${tag} ${build_args} .
    ${CM_OPTS} ${DBX_CONTAINER_MANAGER} buildx build -f Containerfile.${cf_suffix} -t ${name}:${tag} ${build_args} .

    popd

    _logbar Creating ${name} ... done.
}
#*----------------------------------------------------------------------------*
function do_prune
{
    _logbar Shutting down and pruning ...

    for c in $(${DBX_CONTAINER_MANAGER} ps --format json | yq -p=j '.ID' | sed '/---/d')
    do
        ${DBX_CONTAINER_MANAGER} stop $c
    done

    ${DBX_CONTAINER_MANAGER} system prune -af --volumes

    ${DBX_CONTAINER_MANAGER} buildx prune -af 

    _logbar Shutting down and pruning ... done.
}
#*----------------------------------------------------------------------------*

# Tear down
did_prune=0
if [ "${PRUNE}" = '--prune' ]
then
    did_prune=1
    do_prune
fi


# Create images
for name in $(config_imgs_enabled)
do
    create_img ${name}
done


# allow system to coallesce
sleep 5


# assemble
for name in $(config_imgs_assemble)
do
    assemble_distrobox ${name}
done

# Clean up unneeded images
clean_imgs

#*----------------------------------------------------------------------------*
