#!/bin/bash
#*----------------------------------------------------------------------------*
#* NAME: ocisictl
#*
#* DESCRIPTION:
#* Create OCI images and distroboxen
#* Pass --prune as the first arg to stop containers and perform system prune
#*----------------------------------------------------------------------------*

CONFIG=ocisictl.yaml

if $(which yq >/dev/null 2>&1)
then
    true
else
    echo "$0 depends on yq - not found in path"
    exit 2
fi

# CM_OPTS="BUILDKIT_PROGRESS=plain"
CM_OPTS=""

# export DBX_CONTAINER_MANAGER=${DBX_CONTAINER_MANAGER:-docker}

PRUNE=${1:-''}

#*----------------------------------------------------------------------------*
function _logbar
{
    declare -r bar='#* ----------------------------------------------------------------------'

    echo $bar
    echo $*
    echo $bar
}
#*----------------------------------------------------------------------------*{
function _patch_distrobox_export
{
    _logbar Patching distrobox-export ...

    # uri='https://raw.githubusercontent.com/89luca89/distrobox/refs/tags/1.8.1.2/distrobox-export'
    # curl -sO ${uri}
    cp -f $(which distrobox-export) .

    patch distrobox-export distrobox-export-1.8.1.2.patch
 
    _logbar Patching distrobox-export ... done.
}
#*----------------------------------------------------------------------------*
function _remove_distrobox_export
{
    rm -f distrobox-export
}
#*----------------------------------------------------------------------------*
function assemble_distrobox
{
    local name=$1
    local distrobox=$(config_img_distrobox $name)
    [ -z "${distrobox}" ] && distrobox="${name}"
    local manager=$(config_img_manager $name)
    [ -z "${manager}" ] && manager="${DBX_CONTAINER_MANAGER:-docker}"

    _logbar Assembling ${distrobox} using ${manager} ...

    echo DBX_CONTAINER_ALWAYS_PULL=0 DBX_CONTAINER_MANAGER=${manager} distrobox assemble create --replace --name ${distrobox}
    DBX_CONTAINER_ALWAYS_PULL=0 DBX_CONTAINER_MANAGER=${manager} distrobox assemble create --replace --name ${distrobox}

    _logbar Assembling ${distrobox} using ${manager} ... done.
}
#*----------------------------------------------------------------------------*
function clean_imgs
{
    local DBX_CONTAINER_MANAGER=${DBX_CONTAINER_MANAGER:-docker}
    echo "clean_imgs: DBX_CONTAINER_MANAGER=${DBX_CONTAINER_MANAGER}"

    for img in $(config_imgs_not_assemble | tac)
    do
        local tag=$(config_img_tag $img)
        [ -z "${tag}" ] && tag="latest"

        local manager=$(config_img_manager $img)
        [ -z "${manager}" ] && manager=${DBX_CONTAINER_MANAGER}

        img="${img}:${tag}"
        [ ${manager} = 'podman' ] && img=localhost/${img}

        _logbar Cleaning ${img} with ${manager} ...

        ${manager} rmi -f ${img}

        _logbar Cleaning ${img} with ${manager} ... done.
    done

    # if [ ${did_prune} -eq 1 ]
    # then
    #     for manager in $(config_imgs_managers)
    #     do
    #         ${manager} buildx prune -af
    #     done
    # fi
}
#*----------------------------------------------------------------------------*
function config_imgs_assemble
{
    yq 'filter(.assemble == true) | .[].name' ${CONFIG}
}
#*----------------------------------------------------------------------------*
function config_imgs_not_assemble
{
    yq 'filter(.assemble != true and .enabled == true) | .[].name' ${CONFIG}
}
#*----------------------------------------------------------------------------*
function config_imgs_enabled
{
    yq 'filter(.enabled == true) | .[].name' ${CONFIG}
}
#*----------------------------------------------------------------------------*
function config_imgs_managers
{
    yq '.[].manager' ${CONFIG} | sort -u | sed '/null/d'
}
#*----------------------------------------------------------------------------*
function config_img_distrobox
{
    name=$1 yq 'filter(.name == strenv(name)) | .[].distrobox' ${CONFIG} | sed '/null/d'
}
#*----------------------------------------------------------------------------*
function config_img_manager
{
    name=$1 yq 'filter(.name == strenv(name)) | .[].manager' ${CONFIG} | sed '/null/d'
}
#*----------------------------------------------------------------------------*
function config_img_path
{
    name=$1 yq 'filter(.name == strenv(name)) | .[].path' ${CONFIG}
}
#*----------------------------------------------------------------------------*
function config_img_tag
{
    name=$1 yq 'filter(.name == strenv(name)) | .[].tag' ${CONFIG} | sed '/null/d'
}
#*----------------------------------------------------------------------------*
function containers_running
{
    local manager=$1

    local idkey='.ID'
    [ "${manager}" = "podman" ] && idkey=".[].Id"

    ${manager} ps --format json | yq -p=j ${idkey} | sed '/---/d'
}
#*----------------------------------------------------------------------------*
function create_img
{
    local name=$1
    local path=$(config_img_path $name)

    local tag=$(config_img_tag $name)
    [ -z "${tag}" ] && tag="latest"

    local manager=$(config_img_manager $name)
    [ -z "${manager}" ] && manager="${DBX_CONTAINER_MANAGER:-docker}"

    pushd ${path}

    if [ ${did_prune} -ne 1 ]
    then
        ${manager} stop ${name}
        ${manager} rm -f --volumes ${name}
        ${manager} rmi -f ${name}
    fi

    tagged_name=${name}:${tag}
    [ ${manager} = 'podman' ] && tagged_name=localhost/${tagged_name}

    _logbar Creating ${tagged_name} using ${manager} ...

    local build_args=""
    local cf_suffix=${name}
    if [[ "${name}" =~ "-dx"$ ]]
    then
        build_args="--build-arg USER=$USER"
        build_args+=" --build-arg UID=`id -u $USER`"
        build_args+=" --build-arg GID=`id -g $USER`"

        [ ${manager} = 'podman' ] && name=localhost/${name}
        build_args+=" --build-arg IMG=${name%-dx}"

        build_args+=" --build-arg TAG=${tag}"
        cf_suffix="img-dx"
    fi

    cp ../distrobox-export .

    echo ${CM_OPTS} ${manager} buildx build -f Containerfile.${cf_suffix} -t ${tagged_name} ${build_args} .
    ${CM_OPTS} ${manager} buildx build -f Containerfile.${cf_suffix} -t ${tagged_name} ${build_args} .

    rm -f distrobox-export

    popd

    _logbar Creating ${tagged_name} using ${manager} ... done.
}
#*----------------------------------------------------------------------------*
function do_prune
{
    local managers=$(config_imgs_managers)
    [ -z "${managers}" ] && managers="${DBX_CONTAINER_MANAGER:-docker}"

    for manager in ${managers}
    do
        _logbar Shutting down and pruning using ${manager} ...

        for c in $(containers_running ${manager})
        do
            ${manager} stop $c
        done

        ${manager} system prune -af --volumes

        ${manager} buildx prune -af 

        _logbar Shutting down and pruning using ${manager} ... done.
    done
}
#*----------------------------------------------------------------------------*

# Tear down
did_prune=0
if [ "${PRUNE}" = '--prune' ]
then
    did_prune=1
    do_prune
fi

_patch_distrobox_export

# Create images
for name in $(config_imgs_enabled)
do
    create_img ${name}
done


# allow system to coallesce
sleep 5


# assemble
for name in $(config_imgs_assemble)
do
    assemble_distrobox ${name}
done

# Clean up unneeded images
clean_imgs

_remove_distrobox_export

#*----------------------------------------------------------------------------*
